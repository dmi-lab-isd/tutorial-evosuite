/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 03 03:07:48 GMT 2020
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.Warehouse;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Warehouse_ESTest extends Warehouse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      // Undeclared exception!
      try { 
        warehouse0.addProduct((String) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Qty must be positive
         //
         verifyException("tutorial.Warehouse", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      warehouse0.addProduct("(P?[0J3X0x {a^;\"P]", 1140);
      int int0 = warehouse0.availableQty("(P?[0J3X0x {a^;\"P]");
      assertEquals(1140, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      int int0 = warehouse0.availableQty("(P?[0J3X0x {a^;\"P]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      warehouse0.addProduct(":kW", 371);
      int int0 = warehouse0.addProduct(":kW", 370);
      assertEquals(741, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      // Undeclared exception!
      try { 
        warehouse0.addProduct(":kW", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Qty must be positive
         //
         verifyException("tutorial.Warehouse", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      warehouse0.addProduct(":kW", 371);
      int int0 = warehouse0.reserveProduct(":kW");
      assertEquals(370, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Warehouse warehouse0 = new Warehouse();
      int int0 = warehouse0.reserveProduct(":kW");
      assertEquals(0, int0);
  }
}
